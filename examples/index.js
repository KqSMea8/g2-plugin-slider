webpackJsonp([2],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $ = __webpack_require__(3);
	var G2 = __webpack_require__(1);
	__webpack_require__(2);
	$.getJSON('./candleSticks.json', function (data) {
	  var Stat = G2.Stat;
	  var chart = new G2.Chart({
	    id: 'c1',
	    width: 800,
	    height: 250,
	    plotCfg: {
	      margin: [30, 120, 30],
	      background: {
	        fill: '#191821'
	      }
	    }
	  });
	  // 创建数据源
	  var Frame = G2.Frame;
	  var frame = new Frame(data);
	  frame.addCol('trend', function (obj) {
	    return obj.start <= obj.end ? 0 : 1;
	  });
	  chart.source(frame, {
	    'trend': {
	      type: 'cat',
	      alias: '趋势',
	      values: ['上涨', '下跌']
	    },
	    'time': {
	      type: 'timeCat',
	      nice: false,
	      mask: 'mm-dd',
	      alias: '时间',
	      tickCount: 10,
	      range: [0, 1]
	    },
	    'volumn': {
	      alias: '成交量'
	    },
	    'start': {
	      alias: '开盘价'
	    },
	    'end': {
	      alias: '收盘价'
	    },
	    'max': {
	      alias: '最高价'
	    },
	    'min': {
	      alias: '最低价'
	    },
	    'start+end+max+min': {
	      alias: '股票价格'
	    }
	  });
	  chart.axis('time', {
	    title: null
	  });
	  chart.schema().position('time*(start+end+max+min)').color('trend', ['#2AF483', '#F80041']).shape('candle').tooltip('start*end*max*min*volumn');
	  var chart1 = new G2.Chart({
	    id: 'c1',
	    width: 800,
	    height: 80,
	    plotCfg: {
	      margin: [10, 120, 10],
	      background: {
	        fill: '#191821'
	      }
	    }
	  });
	  chart1.source(frame);
	  chart1.col('volumn', {
	    alias: '成交量(万)',
	    tickInterval: 4000
	  });
	  chart1.col('time', {
	    type: 'timeCat',
	    nice: false,
	    mask: 'mm-dd',
	    alias: '时间',
	    tickCount: 10,
	    range: [0, 1]
	  });
	  chart1.axis('time', false);
	  chart1.axis('volumn', {
	    formatter: function formatter(val) {
	      return parseInt(val / 1000, 10) + 'k';
	    }
	  });
	  chart1.interval().position('time*volumn').color('trend', ['#2AF483', '#F80041']);
	  // .tooltip('volumn');
	  chart1.legend('trend', false);
	  var slider = new G2.Plugin.slider({
	    domId: 'range',
	    height: 30,
	    charts: [chart, chart1],
	    xDim: 'time',
	    yDim: 'max'
	  });
	  slider.render();
	});

/***/ }
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9pbmRleC5tZCJdLCJuYW1lcyI6WyIkIiwicmVxdWlyZSIsIkcyIiwiZ2V0SlNPTiIsImRhdGEiLCJTdGF0IiwiY2hhcnQiLCJDaGFydCIsImlkIiwid2lkdGgiLCJoZWlnaHQiLCJwbG90Q2ZnIiwibWFyZ2luIiwiYmFja2dyb3VuZCIsImZpbGwiLCJGcmFtZSIsImZyYW1lIiwiYWRkQ29sIiwib2JqIiwic3RhcnQiLCJlbmQiLCJzb3VyY2UiLCJ0eXBlIiwiYWxpYXMiLCJ2YWx1ZXMiLCJuaWNlIiwibWFzayIsInRpY2tDb3VudCIsInJhbmdlIiwiYXhpcyIsInRpdGxlIiwic2NoZW1hIiwicG9zaXRpb24iLCJjb2xvciIsInNoYXBlIiwidG9vbHRpcCIsImNoYXJ0MSIsImNvbCIsInRpY2tJbnRlcnZhbCIsImZvcm1hdHRlciIsInZhbCIsInBhcnNlSW50IiwiaW50ZXJ2YWwiLCJsZWdlbmQiLCJzbGlkZXIiLCJQbHVnaW4iLCJkb21JZCIsImNoYXJ0cyIsInhEaW0iLCJ5RGltIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxLQUFJQSxJQUFJLG1CQUFBQyxDQUFRLENBQVIsQ0FBUjtBQUNBLEtBQUlDLEtBQUssbUJBQUFELENBQVEsQ0FBUixDQUFUO0FBQ0Esb0JBQUFBLENBQVEsQ0FBUjtBQUNBRCxHQUFFRyxPQUFGLENBQVUscUJBQVYsRUFBaUMsVUFBU0MsSUFBVCxFQUFlO0FBQzVDLE9BQUlDLE9BQU9ILEdBQUdHLElBQWQ7QUFDQSxPQUFJQyxRQUFRLElBQUlKLEdBQUdLLEtBQVAsQ0FBYTtBQUN2QkMsU0FBSSxJQURtQjtBQUV2QkMsWUFBTyxHQUZnQjtBQUd2QkMsYUFBUSxHQUhlO0FBSXZCQyxjQUFTO0FBQ1BDLGVBQVEsQ0FBQyxFQUFELEVBQUssR0FBTCxFQUFVLEVBQVYsQ0FERDtBQUVQQyxtQkFBWTtBQUNWQyxlQUFNO0FBREk7QUFGTDtBQUpjLElBQWIsQ0FBWjtBQVdBO0FBQ0Es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T0FMLFVBQU9NLE1BQVA7QUFDSCxFQXZHRCxFIiwiZmlsZSI6ImV4YW1wbGVzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBHMiA9IHJlcXVpcmUoJ2cyJyk7XG5yZXF1aXJlKCdnMi1wbHVnaW4tc2xpZGVyJyk7XG4kLmdldEpTT04oJy4vY2FuZGxlU3RpY2tzLmpzb24nLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIFN0YXQgPSBHMi5TdGF0O1xuICAgIHZhciBjaGFydCA9IG5ldyBHMi5DaGFydCh7XG4gICAgICBpZDogJ2MxJyxcbiAgICAgIHdpZHRoOiA4MDAsXG4gICAgICBoZWlnaHQ6IDI1MCxcbiAgICAgIHBsb3RDZmc6IHtcbiAgICAgICAgbWFyZ2luOiBbMzAsIDEyMCwgMzBdLFxuICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgZmlsbDogJyMxOTE4MjEnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyDliJvlu7rmlbDmja7mupBcbiAgICB2YXIgRnJhbWUgPSBHMi5GcmFtZTtcbiAgICB2YXIgZnJhbWUgPSBuZXcgRnJhbWUoZGF0YSk7XG4gICAgZnJhbWUuYWRkQ29sKCd0cmVuZCcsIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIChvYmouc3RhcnQgPD0gb2JqLmVuZCkgPyAwIDogMTtcbiAgICB9KTtcbiAgICBjaGFydC5zb3VyY2UoZnJhbWUsIHtcbiAgICAgICd0cmVuZCc6IHtcbiAgICAgICAgdHlwZTogJ2NhdCcsXG4gICAgICAgIGFsaWFzOiAn6LaL5Yq/JyxcbiAgICAgICAgdmFsdWVzOiBbJ+S4iua2qCcsICfkuIvot4wnXVxuICAgICAgfSxcbiAgICAgICd0aW1lJzoge1xuICAgICAgICB0eXBlOiAndGltZUNhdCcsXG4gICAgICAgIG5pY2U6IGZhbHNlLFxuICAgICAgICBtYXNrOiAnbW0tZGQnLFxuICAgICAgICBhbGlhczogJ+aXtumXtCcsXG4gICAgICAgIHRpY2tDb3VudDogMTAsXG4gICAgICAgIHJhbmdlOiBbMCwgMV1cbiAgICAgIH0sXG4gICAgICAndm9sdW1uJzoge1xuICAgICAgICBhbGlhczogJ+aIkOS6pOmHjydcbiAgICAgIH0sXG4gICAgICAnc3RhcnQnOiB7XG4gICAgICAgIGFsaWFzOiAn5byA55uY5Lu3J1xuICAgICAgfSxcbiAgICAgICdlbmQnOiB7XG4gICAgICAgIGFsaWFzOiAn5pS255uY5Lu3J1xuICAgICAgfSxcbiAgICAgICdtYXgnOiB7XG4gICAgICAgIGFsaWFzOiAn5pyA6auY5Lu3J1xuICAgICAgfSxcbiAgICAgICdtaW4nOiB7XG4gICAgICAgIGFsaWFzOiAn5pyA5L2O5Lu3J1xuICAgICAgfSxcbiAgICAgICdzdGFydCtlbmQrbWF4K21pbic6IHtcbiAgICAgICAgYWxpYXM6ICfogqHnpajku7fmoLwnXG4gICAgICB9XG4gICAgfSk7XG4gICAgY2hhcnQuYXhpcygndGltZScsIHtcbiAgICAgIHRpdGxlOiBudWxsXG4gICAgfSk7XG4gICAgY2hhcnQuc2NoZW1hKClcbiAgICAgIC5wb3NpdGlvbigndGltZSooc3RhcnQrZW5kK21heCttaW4pJylcbiAgICAgIC5jb2xvcigndHJlbmQnLCBbJyMyQUY0ODMnLCAnI0Y4MDA0MSddKVxuICAgICAgLnNoYXBlKCdjYW5kbGUnKVxuICAgICAgLnRvb2x0aXAoJ3N0YXJ0KmVuZCptYXgqbWluKnZvbHVtbicpO1xuICAgIHZhciBjaGFydDEgPSBuZXcgRzIuQ2hhcnQoe1xuICAgICAgaWQ6ICdjMScsXG4gICAgICB3aWR0aDogODAwLFxuICAgICAgaGVpZ2h0OiA4MCxcbiAgICAgIHBsb3RDZmc6IHtcbiAgICAgICAgbWFyZ2luOiBbMTAsIDEyMCwgMTBdLFxuICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgZmlsbDogJyMxOTE4MjEnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBjaGFydDEuc291cmNlKGZyYW1lKTtcbiAgICBjaGFydDEuY29sKCd2b2x1bW4nLCB7XG4gICAgICBhbGlhczogJ+aIkOS6pOmHjyjkuIcpJyxcbiAgICAgIHRpY2tJbnRlcnZhbDogNDAwMFxuICAgIH0pO1xuICAgIGNoYXJ0MS5jb2woJ3RpbWUnLCB7XG4gICAgICB0eXBlOiAndGltZUNhdCcsXG4gICAgICBuaWNlOiBmYWxzZSxcbiAgICAgIG1hc2s6ICdtbS1kZCcsXG4gICAgICBhbGlhczogJ+aXtumXtCcsXG4gICAgICB0aWNrQ291bnQ6IDEwLFxuICAgICAgcmFuZ2U6IFswLCAxXVxuICAgIH0pO1xuICAgIGNoYXJ0MS5heGlzKCd0aW1lJywgZmFsc2UpO1xuICAgIGNoYXJ0MS5heGlzKCd2b2x1bW4nLCB7XG4gICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsIC8gMTAwMCwgMTApICsgJ2snO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNoYXJ0MS5pbnRlcnZhbCgpXG4gICAgICAucG9zaXRpb24oJ3RpbWUqdm9sdW1uJylcbiAgICAgIC5jb2xvcigndHJlbmQnLCBbJyMyQUY0ODMnLCAnI0Y4MDA0MSddKVxuICAgICAgLy8gLnRvb2x0aXAoJ3ZvbHVtbicpO1xuICAgIGNoYXJ0MS5sZWdlbmQoJ3RyZW5kJywgZmFsc2UpO1xuICAgIHZhciBzbGlkZXIgPSBuZXcgRzIuUGx1Z2luLnNsaWRlcih7XG4gICAgICBkb21JZDogJ3JhbmdlJyxcbiAgICAgIGhlaWdodDogMzAsXG4gICAgICBjaGFydHM6IFtjaGFydCwgY2hhcnQxXSxcbiAgICAgIHhEaW06ICd0aW1lJyxcbiAgICAgIHlEaW06ICdtYXgnXG4gICAgfSk7XG4gICAgc2xpZGVyLnJlbmRlcigpO1xufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9leGFtcGxlcy9pbmRleC5tZFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=